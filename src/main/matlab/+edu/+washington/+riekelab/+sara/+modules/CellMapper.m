classdef CellMapper < symphonyui.ui.Module
    
    properties
        handles       % UI handles
        data          % Holds data points
        ptNum         % Number of points in plot
    end
    
    properties (Constant = true)
        COLORS = pmkmp(12, 'CubicL');
    end
    
    methods
        function createUi(obj, figureHandle)
            import appbox.*;
            obj.handles.fh = figureHandle;
            
            set(obj.handles.fh,...
                'Color', 'w',...
                'Position', appbox.screenCenter(450,250),...
                'Toolbar', 'auto',...
                'Name', 'Cell Mapper');
            
            c = uicontextmenu(obj.handles.fh);
            obj.handles.fh.UIContextMenu = c;
            
            % Create top-level menu item
            c1 = uimenu('Parent',c,...
                'Label','Clear Figure',...
                'Callback', @obj.clearPlot);
            c2 = uimenu('Parent', c,...
                'Label', 'Send to workspace',...
                'Callback', @obj.sendToWorkspace);
            
            mainLayout = uix.HBox('Parent', obj.handles.fh);
            obj.handles.ax = axes('Parent', mainLayout,...
                'XDir', 'reverse',...
                'YDir', 'reverse');
            grid(obj.handles.ax, 'on');
            hold(obj.handles.ax, 'on');
            
            uiLayout = uix.VBox('Parent', mainLayout);
            obj.handles.loc = uitable('Parent', uiLayout,...
                'FontName', get(obj.handles.fh, 'DefaultUicontrolFontName'),...
                'FontSize', get(obj.handles.fh, 'DefaultUicontrolFontSize'),...
                'Data', [0 0],...
                'ColumnName', {'X', 'Y'},...
                'ColumnEditable', true);
            
            obj.handles.pb.neuron = uicontrol('Parent', uiLayout,...
                'Style', 'push',...
                'String', 'Neuron',...
                'ForegroundColor', obj.COLORS(12,:),...
                'Callback', @obj.addNeuron);
            obj.handles.pb.badCell = uicontrol('Parent', uiLayout,...
                'Style', 'push',...
                'String', 'Bad cell',...
                'ForegroundColor', obj.COLORS(1,:),...
                'Callback', @obj.addBadNeuron);
            obj.handles.pb.star = uicontrol('Parent', uiLayout,...
                'Style', 'push',...
                'String', 'Star',...
                'ForegroundColor', obj.COLORS(7,:),...
                'Callback', @obj.addStar);
            obj.handles.pb.edge = uicontrol('Parent', uiLayout,...
                'Style', 'push',...
                'String', 'Edge',...
                'Callback', @obj.addEdge);
            obj.handles.pb.harp = uicontrol('Parent', uiLayout,...
                'Style', 'push',...
                'String', 'harp',...
                'ForegroundColor', obj.COLORS(4,:),...
                'Callback', @obj.addHarpString);

            ioLayout = uix.HBox('Parent', uiLayout);
            obj.handles.pb.send = uicontrol(ioLayout,...
                'Style', 'push', 'String', 'Send',...
                'Callback', @obj.sendToWorkspace);
            obj.handles.pb.add = uicontrol(ioLayout,...
                'Style', 'push', 'String', 'Add',...
                'Callback', @obj.documentLocation);

            set(uiLayout, 'Heights', [-2 -1 -1 -1 -1 -1 -1]);
            set(mainLayout, 'Widths', [-1.5, -1]);
            
            set(findall(obj.handles.fh, 'Style', 'push'),...
                'FontName', get(obj.handles.fh, 'DefaultUicontrolFontName'),...
                'FontSize', get(obj.handles.fh, 'DefaultUicontrolFontSize'),...
                'BackgroundColor', 'w');
        end % createui
        
        function addNeuron(obj,~,~)
            [x,y] = obj.addPoint();
            tmp = line(x, y, 'Parent', obj.handles.ax,...
                'Marker', '*',...
                'MarkerSize', 8,...
                'Color', obj.COLORS(12,:));
        end
      
        function addHarpString(obj,~,~)
            [x,y] = obj.addPoint();
            tmp = line(x, y, 'Parent', obj.handles.ax,...
                'Marker', 'o',...
                'MarkerFaceColor', obj.COLORS(4,:));
        end
        
        function addEdge(obj, ~, ~)
            [x, y] = obj.addPoint();
            tmp = line(x, y, 'Parent', obj.handles.ax,...
                'Marker', 'o',...
                'MarkerEdgeColor', 'k',...
                'MarkerFaceColor', 'k');
        end
        
        function addStar(obj,~,~)
            [x,y] = obj.addPoint();
            tmp = line(x, y, 'Parent', obj.handles.ax,...
                'Marker', '*',...
                'MarkerFaceColor', obj.COLORS(7,:));
        end
        
        function addBadNeuron(obj,~,~)
            [x,y] = obj.addPoint();
            tmp = line(x, y, 'Parent', obj.handles.ax,...
                'Marker', 'x',...
                'Color', obj.COLORS(1,:));
        end
    end % methods
    
    methods (Access = private)
        function [x, y] = addPoint(obj)
            x = obj.handles.loc.Data(1,1);
            y = obj.handles.loc.Data(1,2);
            obj.data = cat(1, obj.data, [x, y]);
            obj.ptNum = obj.ptNum + 1;
        end
        function clearPlot(obj, ~, ~)
            cla(obj.handles.ax);
            delete(obj.data);
            obj.ptNum = 0;
        end % clearPlot

        function documentLocation(obj, ~, ~)
            epochBlock = obj.documentationService.getCurrentEpochBlock();
            epochGroup = epochBlock.epochGroup;
            source = epochGroup.source;
            sourceKeys = getPropertyMap();
            if ismember('X', sourceKeys)
                source.setProperty('X', obj.handles.loc.Data(1,1));
                source.setProperty('Y', obj.handles.loc.Data(1,2));
            elseif ismember('XLocation', sourceKeys)
                source.setProperty('X', obj.handles.loc.Data(1,1));
                source.setProperty('Y', obj.handles.loc.Data(1,2));
            else
                source.addProperty('XLocation', obj.handles.loc.Data(1,1),...
                    'isRemovable', true);
                source.addProperty('YLocation', obj.handles.loc.Data(1,2),...
                    'isRemovable', true);
            end
            fprintf('added location to %s\n', source.label);
        end
        
        function sendToWorkspace(obj, ~, ~)
            output = struct();
            output.data = obj.data;
            output.handles = obj.handles;
            output.ptNum = obj.ptNum;
            assignin('base', 'output', output);
        end
    end % private methods
end % classdef
